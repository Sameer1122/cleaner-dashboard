   1: // Domain types and mapping utilities for Syncfusion Scheduler
   2: 
   3: export type Property = {
   4:   id: string;
   5:   name: string;
   6:   code?: string;
   7:   timezone?: string; // IANA tz like "America/New_York"
   8:   color?: string;
   9:   address?: string;
  10: };
  11: 
  12: export type Reservation = {
  13:   id: string;
  14:   propertyId: string;
  15:   guestName: string;
  16:   start: string; // ISO string with TZ offset
  17:   end: string; // ISO string with TZ offset
  18:   source?: string; // OTA / Direct
  19:   status?: string;
  20: };
  21: 
  22: export type CleaningType = "turnover" | "midstay" | "deep";
  23: 
  24: export type Cleaning = {
  25:   id: string;
  26:   propertyId: string;
  27:   cleanerId?: string;
  28:   type: CleaningType;
  29:   start: string; // ISO string with TZ offset
  30:   end: string; // ISO string with TZ offset
  31:   status?: "pending" | "assigned" | "in_progress" | "done";
  32:   notes?: string;
  33:   reservationId?: string; // optional linkage
  34:   jobName?: string; // display name for the cleaning job
  35: };
  36: 
  37: export type Cleaner = {
  38:   id: string;
  39:   name: string;
  40:   color?: string;
  41:   capacity?: number;
  42:   status?: "active" | "holiday" | "inactive";
  43: };
  44: 
  45: // Scheduler event type: align with Syncfusion fields
  46: export type CalendarEvent = {
  47:   Id: string | number;
  48:   Subject: string;
  49:   StartTime: Date;
  50:   EndTime: Date;
  51:   IsAllDay?: boolean;
  52:   // resource linking fields: must match ResourceDirective.field
  53:   PropertyId?: string;
  54:   CleanerId?: string;
  55:   ReservationId?: string;
  56:   Type?: "reservation" | "cleaning";
  57:   Status?: string;
  58:   Notes?: string;
  59:   Color?: string;
  60:   CssClass?: string; // Syncfusion event CSS hook
  61: };
  62: 
  63: export function subjectFromReservation(r: Reservation, p?: Property): string {
  64:   const code = p?.code ? `(${p.code}) ` : "";
  65:   return `${code}${r.guestName}`.trim();
  66: }
  67: 
  68: export function subjectFromCleaning(
  69:   c: Cleaning,
  70:   p?: Property,
  71:   cleanerName?: string
  72: ): string {
  73:   const code = p?.code ? `(${p.code}) ` : "";
  74:   const who = cleanerName ? ` â€¢ ${cleanerName}` : "";
  75:   return `${code}${capitalize(c.type)} Clean${who}`.trim();
  76: }
  77: 
  78: function capitalize(s: string) {
  79:   return s.charAt(0).toUpperCase() + s.slice(1);
  80: }
  81: 
  82: export function mapReservationToEvent(
  83:   r: Reservation,
  84:   property?: Property
  85: ): CalendarEvent {
  86:   return {
  87:     Id: r.id,
  88:     Subject: subjectFromReservation(r, property),
  89:     StartTime: new Date(r.start),
  90:     EndTime: new Date(r.end),
  91:     PropertyId: r.propertyId,
  92:     ReservationId: r.id,
  93:     Type: "reservation",
  94:     Status: r.status ?? "confirmed",
  95:     Color: "#10b981", // emerald-500 for reservations
  96:     CssClass: "evt-reservation",
  97:   };
  98: }
  99: 
 100: export function mapCleaningToEvent(
 101:   c: Cleaning,
 102:   property?: Property,
 103:   cleaner?: Cleaner
 104: ): CalendarEvent {
 105:   const subject = (c.jobName && c.jobName.trim())
 106:     || (property?.address && String(property.address).trim())
 107:     || property?.name
 108:     || property?.code
 109:     || `${capitalize(c.type)} Clean`;
 110:   return {
 111:     Id: c.id,
 112:     Subject: subject,
 113:     StartTime: new Date(c.start),
 114:     EndTime: new Date(c.end),
 115:     PropertyId: c.propertyId,
 116:     CleanerId: c.cleanerId,
 117:     ReservationId: c.reservationId,
 118:     Type: "cleaning",
 119:     Status: c.status ?? "pending",
 120:     // Consistent cleaner color across all properties
 121:     Color: "#2563eb", // primary-ish blue
 122:     CssClass: "evt-cleaning",
 123:   };
 124: }
 125: 
 126: export function overlaps(
 127:   a: { start: Date; end: Date },
 128:   b: { start: Date; end: Date }
 129: ) {
 130:   return a.start < b.end && b.start < a.end;
 131: }
 132: 
 133: export function generateTurnoverCleaning(
 134:   r: Reservation,
 135:   durationMinutes = 240
 136: ): Cleaning {
 137:   const start = new Date(r.end);
 138:   const end = new Date(start.getTime() + durationMinutes * 60 * 1000);
 139:   return {
 140:     id: `clean_${r.id}`,
 141:     propertyId: r.propertyId,
 142:     type: "turnover",
 143:     start: start.toISOString(),
 144:     end: end.toISOString(),
 145:     status: "pending",
 146:     reservationId: r.id,
 147:   };
 148: }
 149: 
 150: export function chunkByRange<T extends CalendarEvent>(
 151:   events: T[],
 152:   rangeStart: Date,
 153:   rangeEnd: Date
 154: ): T[] {
 155:   return events.filter((e) =>
 156:     overlaps(
 157:       { start: e.StartTime, end: e.EndTime },
 158:       { start: rangeStart, end: rangeEnd }
 159:     )
 160:   );
 161: }
